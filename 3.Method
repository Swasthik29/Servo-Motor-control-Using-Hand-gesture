import cv2
import mediapipe as mp
import pyfirmata
import numpy as np
import math

# Port configuration for pyfirmata
my_port = 'COM9'
board = pyfirmata.Arduino(my_port)
iter8 = pyfirmata.util.Iterator(board)
iter8.start()

# Pin configuration for servo motor and LEDs
servo_pin = board.get_pin('d:9:s')
led1_pin = board.get_pin('d:2:o')  # LED 1 for Index Finger
led2_pin = board.get_pin('d:3:o')  # LED 2 for Index + Middle Finger
led3_pin = board.get_pin('d:4:o')  # LED 3 for Index + Middle + Ring Finger
led4_pin = board.get_pin('d:5:o')  # LED 4 for Index + Middle + Ring + Little Finger
led5_pin = board.get_pin('d:6:o')   # LED 5 for All Five Fingers

# Helper function to move the servo motor and control LEDs
def move_servo_and_control_leds(fingers):
    if fingers == 1:
        angle = 30
        led1_pin.write(1)
        led2_pin.write(0)
        led3_pin.write(0)
        led4_pin.write(0)
        led5_pin.write(0)
    elif fingers == 2:
        angle = 60
        led1_pin.write(0)
        led2_pin.write(1)
        led3_pin.write(0)
        led4_pin.write(0)
        led5_pin.write(0)
    elif fingers == 3:
        angle = 90
        led1_pin.write(0)
        led2_pin.write(0)
        led3_pin.write(1)
        led4_pin.write(0)
        led5_pin.write(0)
    elif fingers == 4:
        angle = 130
        led1_pin.write(0)
        led2_pin.write(0)
        led3_pin.write(0)
        led4_pin.write(1)
        led5_pin.write(0)
    elif fingers == 5:
        angle = 170
        led1_pin.write(0)
        led2_pin.write(0)
        led3_pin.write(0)
        led4_pin.write(0)
        led5_pin.write(1)
    else:
        angle = 90
        led1_pin.write(0)
        led2_pin.write(0)
        led3_pin.write(0)
        led4_pin.write(0)
        led5_pin.write(0)
    
    servo_pin.write(angle)

# Initialize video capture
cap = cv2.VideoCapture(0)

# MediaPipe hands configuration
with mp.solutions.hands.Hands(min_detection_confidence=0.5, min_tracking_confidence=0.5) as hands:
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            print("Ignoring empty camera frame.")
            continue

        image = cv2.flip(image, 1)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
        results = hands.process(image)
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                lmList = []
                for id, lm in enumerate(hand_landmarks.landmark):
                    h, w, c = image.shape
                    cx, cy = int(lm.x * w), int(lm.y * h)
                    lmList.append([id, cx, cy])
                    cv2.circle(image, (cx, cy), 7, (255, 255, 255), cv2.FILLED)

                # Check for the tips of each finger
                finger_tips = [4, 8, 12, 16, 20]
                finger_states = [lmList[tip][2] < lmList[tip - 2][2] for tip in finger_tips if len(lmList) > tip]

                fingers_detected = sum(finger_states)
                move_servo_and_control_leds(fingers_detected)

                mp.solutions.drawing_utils.draw_landmarks(
                    image,
                    hand_landmarks,
                    mp.solutions.hands.HAND_CONNECTIONS,
                    landmark_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(color=(0, 0, 0)),
                    connection_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(color=(201, 194, 2))
                )

        # Display the image with annotations
        cv2.imshow('MediaPipe Hands', image)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# Release the capture and close all windows
cap.release()
cv2.destroyAllWindows()
